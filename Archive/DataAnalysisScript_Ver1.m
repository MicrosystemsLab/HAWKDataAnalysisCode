%% Worm Tracker Data Analysis Script
% This script brings in the data from the yaml file generated by HAWK and
% analysizes the data.

% Written by: Eileen Mazzochette
% Created: August 1, 2014
% Modified: September 3, 2014

%%%%%
%% Import Data:
FilterSpec = {'*.yaml;*.yml','All yaml Files';'*.*','All Files'};
DestinationFolder = '/Users/emazzochette/Desktop';
[yamlDataFileName, yamlDataPathName] = uigetfile(FilterSpec, 'Select yaml data file', DestinationFolder);

%% Convert to .mat file

%path to Matlab YAML folder
addpath(genpath('YAMLMatlab_0'));

%file to parse name (must be structured correctly)
yaml_file = fullfile(yamlDataPathName, yamlDataFileName);

%If necessary, remove the first line of the yaml file.
fid = fopen(yaml_file);
firstLine = fgetl(fid);

if (firstLine(1:9) == '%YAML:1.0')
    buffer = fread(fid, Inf);
    fclose(fid);
    delete(yaml_file)
    fid = fopen(yaml_file, 'w')  ;   % Open destination file.
    fwrite(fid, buffer) ;                         % Save to file.
    fclose(fid) ;
else
    fclose(fid);
end


%parse
ExperimentData = ReadYaml(yaml_file);

%write file to .mat
mat_file = fullfile(yamlDataPathName,strcat(yamlDataFileName(1:length(yamlDataFileName)-5),'_parsedData.mat'));
save(mat_file, 'ExperimentData');

%% Constants
UM_PER_MICROSTEP = 0.15625 ;
MICROSTEP_PER_UM = 1/UM_PER_MICROSTEP;

PIXEL_PER_UM = 0.567369167;
UM_PER_PIXEL = 1/PIXEL_PER_UM;

IMAGE_WIDTH_PIXELS = 1024;
IMAGE_HEIGHT_PIXELS = 768;

PIXEL_SCALE = 1;

%% Extract General Properties:

fields = fieldnames(ExperimentData);
k = strfind(fields,'WormInfo');

frameCount = 1;
frameCountInsideStim = 1;
stimCount = 1;
for fieldsParser = 1:length(fields)
   
   if  k{fieldsParser} == 1;
        if stimCount ~= ExperimentData.(['WormInfo',num2str(frameCount)]).StimulusNumber
            stimCount = stimCount+1;
            frameCountInsideStim = 1;
        end
        Stimulus(stimCount).ProcessedFrameNumber(frameCountInsideStim) = ExperimentData.(['WormInfo' num2str(frameCount)]).ProcessedFrameNumber;
        Stimulus(stimCount).timeData(frameCountInsideStim,1:6) = datevec(ExperimentData.(['WormInfo',num2str(frameCount)]).Time);
        Stimulus(stimCount).head.x(frameCountInsideStim) = ExperimentData.(['WormInfo' num2str(frameCount)]).Head.x/PIXEL_SCALE;
        Stimulus(stimCount).head.y(frameCountInsideStim) = ExperimentData.(['WormInfo' num2str(frameCount)]).Head.y/PIXEL_SCALE;
        Stimulus(stimCount).stageMovement.x(frameCountInsideStim) = ExperimentData.(['WormInfo' num2str(frameCount)]).StageMovement.x0x2Daxis; %*UM_PER_MICROSTEP;
        Stimulus(stimCount).stageMovement.y(frameCountInsideStim) = ExperimentData.(['WormInfo' num2str(frameCount)]).StageMovement.y0x2Daxis; %*UM_PER_MICROSTEP;
        
        for skeletonParser = 0:length(fieldnames(ExperimentData.(['WormInfo' num2str(frameCount)]).Skeleton))-1
           Stimulus(stimCount).Skeleton(frameCountInsideStim).x(skeletonParser+1) = ExperimentData.(['WormInfo' num2str(frameCount)]).Skeleton.(['Point' num2str(skeletonParser)]).x/PIXEL_SCALE;
           Stimulus(stimCount).Skeleton(frameCountInsideStim).y(skeletonParser+1) = ExperimentData.(['WormInfo' num2str(frameCount)]).Skeleton.(['Point' num2str(skeletonParser)]).y/PIXEL_SCALE;
            
        end
        
        Stimulus(stimCount).centroid.x(frameCountInsideStim) = Stimulus(stimCount).Skeleton(frameCountInsideStim).x(floor(length(Stimulus(stimCount).Skeleton(frameCountInsideStim).x)/2));
        Stimulus(stimCount).centroid.y(frameCountInsideStim) = Stimulus(stimCount).Skeleton(frameCountInsideStim).y(floor(length(Stimulus(stimCount).Skeleton(frameCountInsideStim).y)/2));
        
        frameCount = frameCount + 1;
        frameCountInsideStim = frameCountInsideStim + 1;
   end
   
end
frameCount = frameCount-1;
numStims = length(Stimulus);
% calculate more timing data
%clean up, calculate more timing data:
for stim=1:numStims
    % seventh column of timing data is the seconds + minutes. 
    Stimulus(stim).timeData(:,7) =  Stimulus(stim).timeData(:,4).*60.*60+ Stimulus(stim).timeData(:,5).*60+ Stimulus(stim).timeData(:,6);
    % eighth column of timing data is the elapsed time from first frame in
    % seconds
     Stimulus(stim).timeData(:,8) =  Stimulus(stim).timeData(:,7) -  Stimulus(stim).timeData(1,7);
    %ninth column of timing data is the time since the last frame.
     Stimulus(stim).timeData(:,9) = [0; diff( Stimulus(stim).timeData(:,7))];
end



%% Measure body length
averageBodyLength = 0;

% suptitle('Body Length')
for stim = 1:numStims
    for frameParser = 1:length(Stimulus(stim).head.x); 
       Stimulus(stim).bodyLength(frameParser) = calculateBodyLength(Stimulus(stim).Skeleton(frameParser).x, Stimulus(stim).Skeleton(frameParser).y)*UM_PER_PIXEL; 
    end
    Stimulus(stim).averageBodyLength = mean(Stimulus(stim).bodyLength);%.*UM_PER_PIXEL;
    Stimulus(stim).stdBodyLength = std(Stimulus(stim).bodyLength);%.*UM_PER_PIXEL;

    %Figure out dropped frames:
    droppedFrameCounter = 1;
    goodFrameCounter = 1;
    for frameParser = 1:length(Stimulus(stim).head.x); 
        if (Stimulus(stim).bodyLength(frameParser)< Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength/2 || ...
            Stimulus(stim).bodyLength(frameParser) > Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength)
            Stimulus(stim).droppedFrames(droppedFrameCounter) = frameParser;
            droppedFrameCounter = droppedFrameCounter + 1;
        else
            Stimulus(stim).goodFrames(goodFrameCounter) = frameParser;
            goodFrameCounter = goodFrameCounter + 1;      
        end
        
        
    end
    
    Stimulus(stim).averageBodyLengthGoodFrames = mean(Stimulus(stim).bodyLength(Stimulus(stim).goodFrames)); 
    Stimulus(stim).stdBodyLengthGoodFrames = std(Stimulus(stim).bodyLength(Stimulus(stim).goodFrames));
    averageBodyLength = averageBodyLength + Stimulus(stim).averageBodyLengthGoodFrames;
    
    % Find Omega Turns
    bodyLengthDiff = diff(Stimulus(stim).droppedFrames);
    consecutiveCount = 0;
    blockCount = 1;
    for i = 1:length(bodyLengthDiff)
        if bodyLengthDiff(i) < 3
           consecutiveCount = consecutiveCount+1; 
        else
            block(blockCount,1) = consecutiveCount;
            block(blockCount,2) = i;
            blockCount = blockCount + 1;
           consecutiveCount = 0;
        end
        
        if (i == length(bodyLengthDiff))
            block(blockCount,1) = consecutiveCount;
            block(blockCount,2) = i;
            blockCount = blockCount + 1;
           consecutiveCount = 0;
        end
        
    end
    ind = find(block(:,1)>20);
    omegaTurnIndices = block(ind,2);
    Stimulus(stim).omegaTurnRanges = [Stimulus(stim).droppedFrames(omegaTurnIndices-block(ind,1))' Stimulus(stim).droppedFrames(omegaTurnIndices)'];
    clear ind;
    clear block;
    clear omegaTurnIndices;
    
%     figure(7);
%     subplot(numStims,1,stim);
%     plot(Stimulus(stim).ProcessedFrameNumber,Stimulus(stim).bodyLength,'b-',...
%         [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength, Stimulus(stim).averageBodyLength], 'r:',...
%         [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength/2, Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength/2], 'k:',...
%         [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength/2, Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength/2], 'k:');
%     title(['Body Length per Frame, Stimulus ', num2str(stim)]);
%     xlabel('Frame');
%     ylabel('Body Length (um)');
    
    figure(8)
    subplot(numStims,1,stim);
    plot(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).goodFrames),Stimulus(stim).bodyLength(Stimulus(stim).goodFrames),'r.',...
        Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).droppedFrames),Stimulus(stim).bodyLength(Stimulus(stim).droppedFrames),'b.',...
        [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLengthGoodFrames, Stimulus(stim).averageBodyLengthGoodFrames], 'r:',...
        [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLengthGoodFrames+Stimulus(stim).stdBodyLengthGoodFrames/2, Stimulus(stim).averageBodyLengthGoodFrames+Stimulus(stim).stdBodyLengthGoodFrames/2], 'k:',...
        [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLengthGoodFrames-Stimulus(stim).stdBodyLengthGoodFrames/2, Stimulus(stim).averageBodyLengthGoodFrames-Stimulus(stim).stdBodyLengthGoodFrames/2], 'k:');
    if (any(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges)))
        hold on 
        plot(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges(:,1)),Stimulus(stim).bodyLength(Stimulus(stim).omegaTurnRanges(:,1)),'gx',...
        Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges(:,2)),Stimulus(stim).bodyLength(Stimulus(stim).omegaTurnRanges(:,2)),'gx');
    end
    title(['Body Length per Frame, Stimulus ', num2str(stim)]);
    xlabel('Frame');
    ylabel('Body Length (um)');
    
    
end
averageBodyLength = averageBodyLength/numStims;

%% Plot Head, Centroid position, direction vector

for stim = 1:numStims
    
    directionSmoothing = 30; %frames.

    for frame = 1:length(Stimulus(stim).head.x)
        Stimulus(stim).headRealSpace.x(frame) = (IMAGE_WIDTH_PIXELS - Stimulus(stim).head.x(frame)).*UM_PER_PIXEL;
        Stimulus(stim).headRealSpace.y(frame) = Stimulus(stim).head.y(frame).*UM_PER_PIXEL;
        Stimulus(stim).centroidRealSpace.x(frame) = (IMAGE_WIDTH_PIXELS - Stimulus(stim).centroid.x(frame)).*UM_PER_PIXEL;
        Stimulus(stim).centroidRealSpace.y(frame) = Stimulus(stim).centroid.y(frame).*UM_PER_PIXEL;

        if frame == 1
            Stimulus(stim).stagePosition.x(1) = 0;
            Stimulus(stim).stagePosition.y(1) = 0;
            Stimulus(stim).headPosition.x(1) = Stimulus(stim).stagePosition.x(1) + Stimulus(stim).headRealSpace.x(1);
            Stimulus(stim).headPosition.y(1) = Stimulus(stim).stagePosition.y(1) + Stimulus(stim).headRealSpace.y(1);
            Stimulus(stim).centroidPosition.x(1) = Stimulus(stim).stagePosition.x(1) + Stimulus(stim).centroidRealSpace.x(1);
            Stimulus(stim).centroidPosition.y(1) = Stimulus(stim).stagePosition.y(1) + Stimulus(stim).centroidRealSpace.y(1);
            Stimulus(stim).speed(1) = 0;

        else


            Stimulus(stim).stagePosition.x(frame) = Stimulus(stim).stagePosition.x(frame-1) + Stimulus(stim).stageMovement.x(frame-1);
            Stimulus(stim).stagePosition.y(frame) = Stimulus(stim).stagePosition.y(frame-1) + Stimulus(stim).stageMovement.y(frame-1);

            Stimulus(stim).headPosition.x(frame) = Stimulus(stim).stagePosition.x(frame) + Stimulus(stim).headRealSpace.x(frame);
            Stimulus(stim).headPosition.y(frame) = Stimulus(stim).stagePosition.y(frame) + Stimulus(stim).headRealSpace.y(frame);

            Stimulus(stim).centroidPosition.x(frame) = Stimulus(stim).stagePosition.x(frame) + Stimulus(stim).centroidRealSpace.x(frame);
            Stimulus(stim).centroidPosition.y(frame) = Stimulus(stim).stagePosition.y(frame) + Stimulus(stim).centroidRealSpace.y(frame);

            deltaX = Stimulus(stim).centroidPosition.x(frame)-Stimulus(stim).centroidPosition.x(frame-1);
            deltaY = Stimulus(stim).centroidPosition.y(frame)-Stimulus(stim).centroidPosition.y(frame-1);

            if Stimulus(stim).timeData(frame,9) <= 0.011
                Stimulus(stim).speed(frame) = 0;
            else
                Stimulus(stim).speed(frame) = sqrt(deltaX^2 + deltaY^2)/Stimulus(stim).timeData(frame,9);
            end

            if frame > directionSmoothing
                deltaX = Stimulus(stim).centroidPosition.x(frame)-Stimulus(stim).centroidPosition.x(frame-directionSmoothing);
                deltaY = Stimulus(stim).centroidPosition.y(frame)-Stimulus(stim).centroidPosition.y(frame-directionSmoothing);
                if deltaX == 0
                    Stimulus(stim).movementDirection(frame-directionSmoothing) = 90;
                elseif deltaX>0
                    Stimulus(stim).movementDirection(frame-directionSmoothing) = (180/pi) * atan(deltaY/deltaX);
                elseif deltaX<0 && deltaY>=0
                    Stimulus(stim).movementDirection(frame-directionSmoothing) = 180 - (180/pi) * (atan(deltaY/abs(deltaX)));
                elseif deltaX<0 && deltaY<0
                    Stimulus(stim).movementDirection(frame-directionSmoothing) = -(180 - (180/pi) * atan(abs(deltaY)/abs(deltaX))); 
                end
            end
        end
    end



    figure(stim);

    subplot(311),plot(Stimulus(stim).centroidPosition.x, Stimulus(stim).centroidPosition.y, 'k-', 'MarkerSize',12);
    hold on 
    subplot(311),plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).goodFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).goodFrames), 'b-', 'MarkerSize',12);
    % hold on
    % subplot(211),plot(centroidPositionX([137+directionSmoothing/2:240]), centroidPositionY([137+directionSmoothing/2:240]), 'b-','MarkerSize',12);
    % hold off
    title('Centroid Position', 'FontSize' , 16)
    axis equal;
    xlabel('x position (um)', 'FontSize' , 14)
    ylabel('y position (um)', 'FontSize' , 14)
%     legend('Forward Movement', 'Backward Movement');
    %subplot(312), plot(timeData(:,8),speed)

    subplot(312), plot(Stimulus(stim).ProcessedFrameNumber,Stimulus(stim).speed)
    title('Speed')
    ylabel('Speed (um/s)');
    
    subplot(313), plot(Stimulus(stim).timeData([1:length(Stimulus(stim).movementDirection)],8),Stimulus(stim).movementDirection, 'k.', 'MarkerSize',12);
    % hold on
    % subplot(212), plot(timeData([137:240],8),movementDirection([137:240]), 'b.', 'MarkerSize',12);
    % hold off
    title('Movement Angle', 'FontSize' , 16)
    xlabel('Time (s)', 'FontSize' , 14)
    ylabel('Angle from x-axis (degrees)', 'FontSize' , 14);

end
 
%% Interpolate trajectory, direction: 
figure(6);
for stim = 1:numStims
    Stimulus(stim).trajectory = interpolateTrajectory(Stimulus(stim).centroidPosition.x(Stimulus(stim).goodFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).goodFrames), 10, 250);
    subplot(2, numStims, stim*2-1);
    plot(Stimulus(stim).trajectory.x, Stimulus(stim).trajectory.y,'b.')
    hold on
    plot(Stimulus(stim).trajectory.x(1), Stimulus(stim).trajectory.y(1), 'gx', 'MarkerSize', 14);
    plot(Stimulus(stim).trajectory.x(length(Stimulus(stim).trajectory.x)), Stimulus(stim).trajectory.y(length(Stimulus(stim).trajectory.x)), 'rx', 'MarkerSize', 14);
    axis equal;
    title(['Interpolated Trajectory, Stim number ',num2str(stim)]);
    xlabel('x movement (um)');
    ylabel('y movement (um)');
    subplot(2, numStims, stim*2), plot(Stimulus(stim).trajectory.movementDirection);
    title(['Interpolated Movement Direction, Stim number ',num2str(stim)]);
    ylabel('Direction: angle from x-axis (degrees)');
    xlabel('index');
end

%% Reversal Detection
stim = 1;
operatorLength = 11;
diffOfBoxesOperator = zeros(1,operatorLength);
diffOfBoxesOperator(1:floor(operatorLength/2)) = 1;
diffOfBoxesOperator(ceil(operatorLength/2):operatorLength) = -1;

output = conv(diffOfBoxesOperator, Stimulus(stim).movementDirection);

figure;
subplot(311), plot(diffOfBoxesOperator);
subplot(312), plot(Stimulus(1).movementDirection);
subplot(313), plot(output);






%% Measure Curvature - 
figure;
for stim = 1:numStims
   filename = fullfile(yamlDataPathName, strcat(yamlDataFileName(1:length(yamlDataFileName)-5),'_curvature_Stimulus_',num2str(stim)));
    for frameParser = 1:length(Stimulus(stim).head.x)
        Stimulus(stim).Curvature(frameParser) = curvatureSpline(Stimulus(stim).Skeleton(frameParser).x, Stimulus(stim).Skeleton(frameParser).y, 100);
%         subplot(2,1,1),plot(Stimulus(stim).Curvature(frameParser).x, -Stimulus(stim).Curvature(frameParser).y);
%         hold on
%         subplot(2,1,1),plot(Stimulus(stim).Skeleton(frameParser).x, -Stimulus(stim).Skeleton(frameParser).y, 'rx');
%         hold off
%         axis equal
%         title(['Stimulus', num2str(stim), ', Frame ', num2str(frameParser)]);
%         subplot(2,1,2),plot(Stimulus(stim).Curvature(frameParser).curvature);
%         ylabel('Curvature');
%         frame = getframe(1);
%         im = frame2im(frame);
%         [A,map] = rgb2ind(im,256);
%         if frameParser == 1;
% %             imwrite(A,map,filename,'gif','LoopCount',Inf,'DelayTime',1);
%         else
% %             imwrite(A,map,filename,'gif','WriteMode','append','DelayTime',1);
%         end
        
    end
    
    
end


%% Save Stimulus Data

%write file to .mat
mat_file_Stimulus = fullfile(yamlDataPathName,strcat(yamlDataFileName(1:length(yamlDataFileName)-5),'_StimulusData.mat'));
save(mat_file_Stimulus, 'Stimulus');


%% Create Stimulus Dummy Data

timeStimulus = 0:0.001:max(timeData(:,8));

%displacement in um
displacementStim = zeros(size(timeStimulus));
stimMagnitude = 10; %um
stimWidth = 0.1; %second
stimStart = 20; %second

displacementStim(find(timeStimulus > stimStart & timeStimulus < stimStart + stimWidth)) = stimMagnitude;

plot(timeStimulus,displacementStim);
xlabel('Time (s)');
ylabel('Stimulus Displacement (um)');
