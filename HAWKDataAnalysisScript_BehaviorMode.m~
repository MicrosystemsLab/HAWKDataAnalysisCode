%% Worm Tracker Data Analysis Script - Behavior Mode Analysis
% This script brings in the data from the yaml file generated by HAWK and
% analysizes the data.
%
%  Copyright 2015 Eileen Mazzochette, et al <emazz86@stanford.edu>
%  This file is part of HAWK_Analysis_Methods.
%
%%%%%
clear all;
close all;
% Get Folder where all the files are:
clear all
if (ispc) %if on PC workstation in MERL 223
    DestinationFolder = 'C:\Users\HAWK\Documents\HAWKData';
    addpath(genpath('C:\Users\HAWK\Documents\HAWKDataAnalysisCode\YAMLMatlab_0.4.3'));
    excelFile = 'C:\Users\HAWK\Dropbox\HAWK\HAWKExperimentLog.xls';
    addpath('C:\Users\HAWK\Documents\HAWKDataAnalysisCode\20130227_xlwrite');
%     slash = '\';
    % For excel writing, need these files linked:
    % Initialisation of POI Libs
    % Add Java POI Libs to matlab javapath
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\poi-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\poi-ooxml-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\poi-ooxml-schemas-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\xmlbeans-2.3.0.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\dom4j-1.6.1.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\stax-api-1.0.1.jar');
elseif (ismac) % if on Eileen's personal computer
    DestinationFolder = '/Volumes/home/HAWK Data/';
    addpath(genpath('/Users/emazzochette/Documents/MicrosystemsResearch/HAWK/HAWKDataAnalysisCode/HAWKDataAnalysisCode/YAMLMatlab_0.4.3'));
    excelFile = '/Users/emazzochette/Dropbox/HAWK/HAWKExperimentLog.xls';
    addpath('/Users/emazzochette/Documents/MicrosystemsResearch/HAWK/HAWKDataAnalysisCode/HAWKDataAnalysisCode/20130227_xlwrite');
%     slash = '/';
    % For excel writing, need these files linked:
    % Initialisation of POI Libs
    % Add Java POI Libs to matlab javapath
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/poi-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/poi-ooxml-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/poi-ooxml-schemas-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/xmlbeans-2.3.0.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/dom4j-1.6.1.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/stax-api-1.0.1.jar');
end

%Choice of how to export plots, either individual plots (false), or grouped in a
%single window by stimulus (true)
plotByStim = false; 

%asks user for the directory where all the files are:
directory = uigetdir(DestinationFolder,'Choose the folder where the data if located');
%determine experiment title based on file name:
experimentTitle = getExperimentTitle(directory);
%Extract tracking, stimulus data from YAML files: 
TrackingData = getTrackingDataFromYAML(directory,experimentTitle);
StimulusData = getStimulusDataFromYAML(directory,experimentTitle);


%% Populate Experiment Log Spreadsheet:

[NUM,TXT,RAW]=xlsread(excelFile,'Experiment Log Behavior');
[rowCount columnCount] = size(RAW);
spreadsheetTitles = TXT(1,:);
%check if it's already been populated:
if(strmatch(experimentTitle,TXT(:,strmatch('Experiment Name',TXT(1,:),'exact')),'exact')>0)
    experimentRow = strmatch(experimentTitle,TXT(:,2));
else
    experimentRow = rowCount+1;
end
newRow = populateBehaviorExperimentParameters( experimentTitle, TrackingData, spreadsheetTitles);

xlwrite(excelFile, newRow, 'Experiment Log Behavior', strcat('A',num2str(experimentRow)));

% Load System Constants necessary for analysis
HAWKSystemConstants


%% Stop here if no stimulus
if (ismember('NumberOfStimulus',fieldnames(TrackingData)))
    if (TrackingData.NumberOfStimulus < 1) % fix this once corrected in HAWK software
        disp('No Stimulus Recorded');
        break;
    end
end

%% Extract General Properties:
% mat file name for the per stimulus data structure.
mat_file = fullfile(directory,strcat(experimentTitle,'_DataByStimulus.mat'));
%if the data has already been read from the .yaml file, just load the mat
%file created last time:
if (exist(mat_file, 'file')==2)
    load(mat_file);
    if (ismember('NumberOfStimulus',fieldnames(TrackingData)))
        numStims = TrackingData.NumberOfStimulus;
    else
        numStims =  length(Stimulus);
    end
else %otherwise, create the Stimulus data structure.
    %Start by moving through all the tracking data to get position data of
    %worm per frame, per stim count.
    [Stimulus, numStims] = extractBehaviorDataFromTracking(TrackingData);
    %Save stimulus to mat file
    save(mat_file, 'Stimulus');
end


%% Filter Frames:


clear Stimulus.droppedFrames;
clear Stimulus.goodFrames;
clear Stimulus.omegaTurnRanges;

for stim = 1:numStims

    

    if (~plotByStim)
        figure;
        plot(Stimulus(stim).ProcessedFrameNumber,Stimulus(stim).bodyLength,'r.',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength, Stimulus(stim).averageBodyLength], 'r:',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength*1.75, Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength*1.75], 'k:',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength*1.75, Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength*1.75], 'b:', 'LineWidth', 3);
        title(['Body Length per Frame, Stimulus ', num2str(stim)], 'FontSize', 18);
        xlabel('Frame', 'FontSize', 16);
        ylabel('Body Length (um)', 'FontSize', 16);
        legend('Body Length','Average Body Length', 'STD*1.5','STD*1.5','Location','South')
        axis([Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser), 150, 1000])
    end

    %Figure out dropped frames:
    droppedFrameCounter = 1;
    goodFrameCounter = 1;
    for frameParser = 1:length(Stimulus(stim).head.x); 
        if (Stimulus(stim).bodyLength(frameParser) < Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength*1.75 || ...
            Stimulus(stim).bodyLength(frameParser) > Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength*1.75)
            Stimulus(stim).droppedFrames(droppedFrameCounter) = frameParser;
            droppedFrameCounter = droppedFrameCounter + 1;
        else
            Stimulus(stim).goodFrames(goodFrameCounter) = frameParser;
            goodFrameCounter = goodFrameCounter + 1;      
        end
        
        
    end
    
    Stimulus(stim).averageBodyLengthGoodFrames = mean(Stimulus(stim).bodyLength(Stimulus(stim).goodFrames)); 
    Stimulus(stim).stdBodyLengthGoodFrames = std(Stimulus(stim).bodyLength(Stimulus(stim).goodFrames));
    averageBodyLength = averageBodyLength + Stimulus(stim).averageBodyLengthGoodFrames;
    
    % Find Omega Turns
    if (length(Stimulus(stim).droppedFrames)>=3)
        bodyLengthDiff = diff(Stimulus(stim).droppedFrames);
        consecutiveCount = 0;
        blockCount = 1;
        for i = 1:length(bodyLengthDiff)
            if bodyLengthDiff(i) < 3
               consecutiveCount = consecutiveCount+1; 
            else
                block(blockCount,1) = consecutiveCount;
                block(blockCount,2) = i;
                blockCount = blockCount + 1;
               consecutiveCount = 0;
            end

            if (i == length(bodyLengthDiff))
                block(blockCount,1) = consecutiveCount;
                block(blockCount,2) = i;
                blockCount = blockCount + 1;
               consecutiveCount = 0;
            end

        end
        ind = find(block(:,1)>20);
        omegaTurnIndices = block(ind,2);
        Stimulus(stim).omegaTurnRanges = [Stimulus(stim).droppedFrames(omegaTurnIndices-block(ind,1)+1)' Stimulus(stim).droppedFrames(omegaTurnIndices)'];
        dimensions = size(Stimulus(stim).omegaTurnRanges);
        for i = 1:dimensions(1)
            Stimulus(stim).omegaTurnFrames = Stimulus(stim).omegaTurnRanges(i,1):Stimulus(stim).omegaTurnRanges(i,2);
        end
    end
    clear ind;
    clear block;
    clear omegaTurnIndices;
    clear dimensions;

   if (~plotByStim)
       figure;
        plot(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).goodFrames),Stimulus(stim).bodyLength(Stimulus(stim).goodFrames),'r.',...
            Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).droppedFrames),Stimulus(stim).bodyLength(Stimulus(stim).droppedFrames),'b.',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLengthGoodFrames, Stimulus(stim).averageBodyLengthGoodFrames], 'r:',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLengthGoodFrames+Stimulus(stim).stdBodyLengthGoodFrames/2, Stimulus(stim).averageBodyLengthGoodFrames+Stimulus(stim).stdBodyLengthGoodFrames/2], 'k:',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLengthGoodFrames-Stimulus(stim).stdBodyLengthGoodFrames/2, Stimulus(stim).averageBodyLengthGoodFrames-Stimulus(stim).stdBodyLengthGoodFrames/2], 'b:','LineWidth',3);%,...
           % Stimulus(stim).ProcessedFrameNumber, Stimulus(stim).headTailToggle*(Stimulus(stim).averageBodyLengthGoodFrames/2), 'b-');
        if (any(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges)))
            hold on 
            plot(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges(:,1)),Stimulus(stim).bodyLength(Stimulus(stim).omegaTurnRanges(:,1)),'g+',...
            Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges(:,2)),Stimulus(stim).bodyLength(Stimulus(stim).omegaTurnRanges(:,2)),'g+','LineWidth',5);
        end
        title(['Body Length per Frame, Stimulus ', num2str(stim)], 'FontSize', 18);
        xlabel('Frame', 'FontSize', 16);
        ylabel('Body Length (um)', 'FontSize', 16);
        legend('Body Length Good Frames','Body Length Dropped Frames','Average Body Length', 'STD/2','STD/2','Beginning, End Omega Turn','Location','South')
        axis([Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser), 150, 1000])
   end
end
averageBodyLength = averageBodyLength/numStims;




%% Sort Frames based on Stimulus
Stimulus = sortFramesBasedOnStimulus(Stimulus, numStims);


%% Plot Head, Centroid position, direction vector
[Stimulus] = determineWormTrajectory(Stimulus, numStims)


for stim = 1:numStims
    
    directionSmoothing = 15; %frames.
 
    if (~plotByStim)
        figure;
        numGoodFrames = length(Stimulus(stim).goodFrames);
        %subplot(311),plot(Stimulus(stim).centroidPosition.x, Stimulus(stim).centroidPosition.y, 'k-', 'MarkerSize',12);
        hold on 
    %     subplot(111);
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).PreStimFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).PreStimFrames), 'r-', 'LineWidth',2);  
        hold on
    %     subplot(111);
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).DuringStimFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).DuringStimFrames), 'b-', 'LineWidth',2); 
        hold on
    %     subplot(111);
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).PostStimFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).PostStimFrames), 'k-', 'LineWidth',2); 
        hold on
    %     subplot(111);
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).goodFrames(1)), Stimulus(stim).centroidPosition.y(Stimulus(stim).goodFrames(1)), 'ro', 'MarkerSize',14);
        hold on
    %     subplot(111);
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).goodFrames( numGoodFrames)), Stimulus(stim).centroidPosition.y(Stimulus(stim).goodFrames( numGoodFrames)), 'kx', 'MarkerSize',14);

        title(['Mid-Skeleton Position, Stimulus ' num2str(stim)], 'FontSize' , 18)
        axis equal;
        xlabel('x position (um)', 'FontSize' , 16)
        ylabel('y position (um)', 'FontSize' , 16)
        legend('Pre Stimulus Movement', 'During Stimulus Movement', 'Post Stimulus Movement','Start','End','Location','SouthWest');

    end


end

%% Determine Forward, Backward, other movement
markers ={'r-','b-','k-','y-','g-'};
gap = 10;
figure;
for stim = 1:numStims
    numGoodFrames = length(Stimulus(stim).goodFrames);
    forwardCounter = 1;
    backwardCounter = 1;
    smallerCounter = 1;
    biggerCounter = 1;
    for frame = gap+1:numGoodFrames
       currentFrame = Stimulus(stim).goodFrames(frame);
       previousFrame = Stimulus(stim).goodFrames(frame-gap);
       distanceRefHead = distanceCalc(Stimulus(stim).centroidPosition.x(currentFrame), Stimulus(stim).centroidPosition.y(currentFrame), Stimulus(stim).headPosition.x(currentFrame), Stimulus(stim).headPosition.y(currentFrame));
       distanceRefPrevHead = distanceCalc(Stimulus(stim).centroidPosition.x(currentFrame), Stimulus(stim).centroidPosition.y(currentFrame), Stimulus(stim).headPosition.x(previousFrame), Stimulus(stim).headPosition.y(previousFrame));
       distanceRefTail = distanceCalc(Stimulus(stim).centroidPosition.x(currentFrame), Stimulus(stim).centroidPosition.y(currentFrame), Stimulus(stim).tailPosition.x(currentFrame), Stimulus(stim).tailPosition.y(currentFrame));
       distanceRefPrevTail = distanceCalc(Stimulus(stim).centroidPosition.x(currentFrame), Stimulus(stim).centroidPosition.y(currentFrame), Stimulus(stim).tailPosition.x(previousFrame), Stimulus(stim).tailPosition.y(previousFrame));
        % check if moving forward
        if ((distanceRefPrevHead > distanceRefHead) && (distanceRefPrevTail < distanceRefTail))
            Stimulus(stim).forwardFrames(forwardCounter) = currentFrame;
            plot([currentFrame currentFrame],[stim stim+0.5], markers{1},'LineWidth',2);
            forwardCounter = forwardCounter + 1;
            % check if moving backward
        elseif ((distanceRefPrevHead < distanceRefHead) && (distanceRefPrevTail > distanceRefTail))
            Stimulus(stim).backwardFrames(backwardCounter) = currentFrame;
            plot([currentFrame currentFrame],[stim stim+0.5], markers{2},'LineWidth',2);
            backwardCounter = backwardCounter + 1;
%         elseif ((distanceRefPrevHead < distanceRefHead) && (distanceRefPrevTail < distanceRefTail))
%             Stimulus(stim).unknownMovementFrames(otherCounter) = currentFrame;
%             plot([currentFrame currentFrame],[stim stim+0.5], markers{3},'LineWidth',2);
%             smallerCounter = smallerCounter + 1;
%         elseif ((distanceRefPrevHead > distanceRefHead) && (distanceRefPrevTail > distanceRefTail))
%              Stimulus(stim).unknownMovementFrames(otherCounter) = currentFrame;
%             plot([currentFrame currentFrame],[stim stim+0.5], markers{4},'LineWidth',2);
%             smallerCounter = smallerCounter + 1;
        else
            Stimulus(stim).unknownMovementFrames(smallerCounter) = currentFrame;
            plot([currentFrame currentFrame],[stim stim+0.5], markers{3},'LineWidth',2);
            smallerCounter = smallerCounter + 1;
        end
        hold on
       
    end
    
    
   %plot omega turns
    if (isfield(Stimulus(stim),'omegaTurnFrames'))
        for i = 1:length(Stimulus(stim).omegaTurnFrames)
            plot([Stimulus(stim).omegaTurnFrames(i) Stimulus(stim).omegaTurnFrames(i)], [stim stim+0.5], markers{5},'LineWidth', 2);
        end
    end
    
    
    plot(stim+Stimulus(stim).headTailToggle*0.4-0.45, 'r-','LineWidth',2)
    plot(stim+Stimulus(stim).StimulusActivity*0.4-0.45, 'b-', 'LineWidth',2)
    
    hold on;
  
   

end
 xlabel('Frame Number','FontSize', 20);
 ylabel('Stimulus','FontSize', 20);

%% Write per stimulus data to excel spread sheet
%save(mat_file, 'Stimulus');

videoPresent = true;

Stimulus = SpatialResolutionScript(directory, Stimulus, TrackingData, numStims, videoPresent);

mat_file = fullfile(directory,strcat(experimentTitle,'_DataByStimulus.mat'));
save(mat_file, 'Stimulus');

[data, firstColumn] = populateBehaviorExperimentPerStimulusData( Stimulus, spreadsheetTitles, numStims);
xlwrite(excelFile, data, 'Experiment Log Behavior', strcat('A'+firstColumn-1,num2str(experimentRow+1)));


%% plot by stimulus
if (plotByStim)
    for stim = 1:numStims
        figure;


        
        % body length plot pre analysis:
%         subplot(3,2,1)
%         plot(Stimulus(stim).ProcessedFrameNumber,Stimulus(stim).bodyLength,'r.',...
%             [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength, Stimulus(stim).averageBodyLength], 'r:',...
%             [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength, Stimulus(stim).averageBodyLength+Stimulus(stim).stdBodyLength], 'k:',...
%             [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser)],[Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength/2, Stimulus(stim).averageBodyLength-Stimulus(stim).stdBodyLength/2], 'b:', 'LineWidth', 3);
%         title(['Body Length per Frame, Stimulus ', num2str(stim)], 'FontSize', 18);
%         xlabel('Frame', 'FontSize', 16);
%         ylabel('Body Length (um)', 'FontSize', 16);
%         legend('Body Length','Average Body Length', 'STD','STD/2','Location','South')
%         axis([Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(frameParser), 150, 1000])

       
        % body length plot post analysis:
        subplot(1,2,1);
        totalFrameNum = length(Stimulus(stim).ProcessedFrameNumber);
        plot(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).goodFrames),Stimulus(stim).bodyLength(Stimulus(stim).goodFrames),'r.',...
            Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).droppedFrames),Stimulus(stim).bodyLength(Stimulus(stim).droppedFrames),'b.',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(totalFrameNum)],[Stimulus(stim).averageBodyLengthGoodFrames, Stimulus(stim).averageBodyLengthGoodFrames], 'r:',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(totalFrameNum)],[Stimulus(stim).averageBodyLengthGoodFrames+Stimulus(stim).stdBodyLengthGoodFrames/2, Stimulus(stim).averageBodyLengthGoodFrames+Stimulus(stim).stdBodyLengthGoodFrames/2], 'k:',...
            [Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(totalFrameNum)],[Stimulus(stim).averageBodyLengthGoodFrames-Stimulus(stim).stdBodyLengthGoodFrames/2, Stimulus(stim).averageBodyLengthGoodFrames-Stimulus(stim).stdBodyLengthGoodFrames/2], 'b:','LineWidth',3);%,...
           % Stimulus(stim).ProcessedFrameNumber, Stimulus(stim).headTailToggle*(Stimulus(stim).averageBodyLengthGoodFrames/2), 'b-');
        if (any(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges)))
            hold on 
            plot(Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges(:,1)),Stimulus(stim).bodyLength(Stimulus(stim).omegaTurnRanges(:,1)),'g+',...
            Stimulus(stim).ProcessedFrameNumber(Stimulus(stim).omegaTurnRanges(:,2)),Stimulus(stim).bodyLength(Stimulus(stim).omegaTurnRanges(:,2)),'g+','LineWidth',5);
        end
        title(['Body Length per Frame, Stimulus ', num2str(stim)], 'FontSize', 18);
        xlabel('Frame', 'FontSize', 16);
        ylabel('Body Length (um)', 'FontSize', 16);
        legend('Body Length Good Frames','Body Length Dropped Frames','Average Body Length', 'STD/2','STD/2','Beginning, End Omega Turn','Location','South')
        axis([Stimulus(stim).ProcessedFrameNumber(1), Stimulus(stim).ProcessedFrameNumber(totalFrameNum), 150, 1000])

        %Trajectory plot:
        subplot(1,2,2);
        numGoodFrames = length(Stimulus(stim).goodFrames);
        %pre stim:
        hold on 
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).PreStimFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).PreStimFrames), 'r-', 'LineWidth',2);  
        %during stim:
        hold on
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).DuringStimFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).DuringStimFrames), 'b-', 'LineWidth',2); 
        %post stim:
        hold on
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).PostStimFrames), Stimulus(stim).centroidPosition.y(Stimulus(stim).PostStimFrames), 'k-', 'LineWidth',2); 
        %first position:
        hold on
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).goodFrames(1)), Stimulus(stim).centroidPosition.y(Stimulus(stim).goodFrames(1)), 'ro', 'MarkerSize',14);
        %last position:
        hold on
        plot(Stimulus(stim).centroidPosition.x(Stimulus(stim).goodFrames( numGoodFrames)), Stimulus(stim).centroidPosition.y(Stimulus(stim).goodFrames( numGoodFrames)), 'kx', 'MarkerSize',14);

        title(['Mid-Skeleton Position, Stimulus ' num2str(stim)], 'FontSize' , 18)
        axis equal;
        xlabel('x position (um)', 'FontSize' , 16)
        ylabel('y position (um)', 'FontSize' , 16)
        legend('Pre Stimulus Movement', 'During Stimulus Movement', 'Post Stimulus Movement','Start','End','Location','SouthWest');


    end
end

