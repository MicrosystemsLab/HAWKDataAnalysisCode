%% Worm Tracker Data Analysis Script
% This script brings in the data from the yaml file generated by HAWK and
% analysizes the data.

% Written by: Eileen Mazzochette
% Created: October 20, 2014
%
%%%%%
clear all;
close all;
% Get Folder where all the files are:
clear all
if (ispc) %if on PC workstation in MERL 223
    DestinationFolder = 'C:\Users\HAWK\Documents\HAWKData';
    addpath(genpath('C:\Users\HAWK\Documents\HAWKDataAnalysisCode\YAMLMatlab_0.4.3'));
    excelFile = 'C:\Users\HAWK\Dropbox\HAWK\HAWKExperimentLog.xls';
    addpath('C:\Users\HAWK\Documents\HAWKDataAnalysisCode\20130227_xlwrite');
    slash = '\';
    % For excel writing, need these files linked:
    % Initialisation of POI Libs
    % Add Java POI Libs to matlab javapath
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\poi-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\poi-ooxml-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\poi-ooxml-schemas-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\xmlbeans-2.3.0.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\dom4j-1.6.1.jar');
    javaaddpath('20130227_xlwrite\20130227_xlwrite\poi_library\stax-api-1.0.1.jar');
elseif (ismac) % if on Eileen's personal computer
    DestinationFolder = '/Volumes/home/HAWK Data/';
    addpath(genpath('/Users/emazzochette/Documents/MicrosystemsResearch/HAWK/HAWKDataAnalysisCode/HAWKDataAnalysisCode/YAMLMatlab_0.4.3'));
    excelFile = '/Users/emazzochette/Dropbox/HAWK/HAWKExperimentLog.xls';
    addpath('/Users/emazzochette/Documents/MicrosystemsResearch/HAWK/HAWKDataAnalysisCode/HAWKDataAnalysisCode/20130227_xlwrite');
    slash = '/';
    % For excel writing, need these files linked:
    % Initialisation of POI Libs
    % Add Java POI Libs to matlab javapath
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/poi-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/poi-ooxml-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/poi-ooxml-schemas-3.8-20120326.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/xmlbeans-2.3.0.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/dom4j-1.6.1.jar');
    javaaddpath('20130227_xlwrite/20130227_xlwrite/poi_library/stax-api-1.0.1.jar');
end



%asks user for the directory where all the files are:
%directory = uigetdir(DestinationFolder,'Choose the folder where the data if located');
directories = uipickfiles( 'FilterSpec',DestinationFolder);\

for dir = 1:length(directories)
    directory = directories(:,dir);
    %determine experiment title based on file name:
    for index = length(directory):-1:1
        if (directory(index) == slash)
            startTitleIndex = index+1;
            break;
        end
    end
    experimentTitle = directory(startTitleIndex:length(directory));

    %extracts file name for each of the data files created during the
    %experiment:
    trackingDataFilename = strcat(experimentTitle, '_tracking.yaml');
    fpgaDataFilename = strcat(experimentTitle, '_FPGAdata.yaml');
    stimulusDataFilename = strcat(experimentTitle, '_stimulus.yaml');



    % Get Tracking Data:
    mat_file = fullfile(directory,strcat(experimentTitle,'_tracking_parsedData.mat'));
    %if the data has already been read from the .yaml file, just load the mat
    %file created last time:
    if (exist(mat_file, 'file')==2)
        load(mat_file);
    else %otherwise, parse through .yaml file:
        %file to parse name (must be structured correctly)
        tracking_file = fullfile(directory, trackingDataFilename);
        %If necessary, remove the first line of the yaml file.
        fid = fopen(tracking_file);
        firstLine = fgetl(fid);
        if (firstLine(1:9) == '%YAML:1.0')
            buffer = fread(fid, Inf);
            fclose(fid);
            delete(tracking_file)
            fid = fopen(tracking_file, 'w')  ;   % Open destination file.
            fwrite(fid, buffer) ;                         % Save to file.
            fclose(fid) ;
        else
            fclose(fid);
        end
        %parse
        TrackingData = ReadYaml(tracking_file);
        %write file to .mat
        mat_file = fullfile(directory,strcat(experimentTitle,'_tracking_parsedData.mat'));
        save(mat_file, 'TrackingData');
    end

    % Get FPGA Data:
    mat_file = fullfile(directory,strcat(experimentTitle,'_FPGAdata_parsedData.mat'));
    %if the data has already been read from the .yaml file, just load the mat
    %file created last time:
    if (exist(mat_file, 'file')==2)
        load(mat_file);
    else %otherwise, parse through .yaml file:
        %file to parse name (must be structured correctly)
        fpga_file = fullfile(directory, fpgaDataFilename);
        %If necessary, remove the first line of the yaml file.
        fid = fopen(fpga_file);
        firstLine = fgetl(fid);
        if (firstLine(1:9) == '%YAML:1.0')
            buffer = fread(fid,  Inf);
            fclose(fid);
            delete(fpga_file)
            fid = fopen(fpga_file, 'w')  ;   % Open destination file.
            fwrite(fid, buffer) ;                         % Save to file.
            fclose(fid) ;
        else
            fclose(fid);
        end
        %parse
        FPGAData = ReadYaml(fpga_file);
        %write file to .mat
        save(mat_file, 'FPGAData');
    end


    % Get Stimulus Data:
    mat_file = fullfile(directory,strcat(experimentTitle,'_stimulus_parsedData.mat'));
    %if the data has already been read from the .yaml file, just load the mat
    %file created last time:
    if (exist(mat_file, 'file')==2)
        load(mat_file);
    else %otherwise, parse through .yaml file:
        %file to parse name (must be structured correctly)
        stimulus_file = fullfile(directory, stimulusDataFilename);
        %If necessary, remove the first line of the yaml file.
        fid = fopen(stimulus_file);
        firstLine = fgetl(fid);
        if (firstLine(1:9) == '%YAML:1.0')
            buffer = fread(fid, Inf);
            fclose(fid);
            delete(stimulus_file)
            fid = fopen(stimulus_file, 'w')  ;   % Open destination file.
            fwrite(fid, buffer) ;                         % Save to file.
            fclose(fid) ;
        else
            fclose(fid);
        end
        %parse yaml file:
        StimulusData = ReadYaml(stimulus_file);
        %write file to .mat file
        save(mat_file, 'StimulusData');
    end
end